import asyncio
import threading


class UserAuthorizationManager:
    passwords = {
        "–∂–∞–≤–∞—Ä–∞–Ω–∞–∫", "–≤–µ—Ä–∞–±–µ–π", "–±—É—Å–µ–ª", "–≤–∞—Ä–æ–Ω–∞", "—Ü–µ—Ü—è—Ä—É–∫", "—Å—ã—á", 
        "–≥–∞–ª—É–±", "–≥–æ–ª—É–±", "–∫–∞—á–∫–∞", "–¥—Ä–æ–∑–¥", "—Å—ñ–Ω—ñ—Ü–∞", "—à–ø–∞–∫", "—Å–∞–ª–∞—û–µ–π",
        "–∑—è–±–ª—ñ–∫", "—Å–æ–∫–∞–ª", "–∞—Ä–æ–ª", "–∂—É—Ä–∞–≤–µ–ª—å", "—á–∞–ø–ª—è", "–≥—Ä–∞–∫", "–ª–∞—Å—Ç–∞—û–∫–∞",
        "—Å–≤—ñ—Ä–≥—É–ª—å", "—Å–∞–≤–∞", "–∫—É—Ä–≥–∞–Ω–Ω—ñ–∫", "–≥–ª—É—à—ç—Ü", "–ø–∞–ø—É–≥–∞–π", "–ª–µ–±–µ–¥–∑—å",
        "–≥–∞–ª–∞—û–∫–∞", "—Ñ–∞–∑–∞–Ω", "–∫–∞–Ω–∞—Ä—ç–π–∫–∞", "—á–æ–º–≥–∞", "–±–µ–∫–∞—Å", "–∫—ñ–≤—ñ", "–≤—É—Ö–∞–Ω—å",
        "–ø—É–≥–∞—á", "–∑—è–ª—ë–Ω–∞–≥—Ä—É–¥–∫–∞", "–∫—É—Ä—ã—Ü–∞", "–∫–∞–≤–∞–ª—å", "–≥—É—Å—å", "—Å—Ç—Ä–∞—û—Å",
        "—ñ–Ω—å–¥–∑—é–∫", "–∫–∞–∑–∞—Ä–∫–∞", "–º–∞–Ω–¥–∞—Ä—ã–Ω–∫–∞", "–∫—Ä—ã–∂–∞–Ω–∫–∞", "—à—ã—Ä–∞–∫–∞–Ω–æ—Å–∫–∞",
        "—à—ã–ª–∞—Ö–≤–æ—Å—Ç–∫–∞", "—á—ã—Ä–æ–∫", "–Ω—ã—Ä—ç—Ü", "–Ω—ã—Ä–æ–∫", "—á–∞—Ä–Ω–µ—Ü", "–≥–∞–≥–∞", "—Ç—É—Ä–ø–∞–Ω",
        "—Å—ñ–Ω—å–≥–∞", "–º–∞—Ä–∞–Ω–∫–∞", "–≥–æ–≥–∞–ª—å", "–ª—É—Ç–æ–∫", "—Å–∞–≤—É–∫", "–∫—Ä–∞—Ö–∞–ª—å",
        "–∫—É—Ä–∞–ø–∞—Ç–∫–∞", "–ø–µ—Ä–∞–ø—ë–ª–∫–∞", "—Ä–∞–±—á—ã–∫", "–ø–∞—Ä–¥–≤–∞", "–≥–∞–≥–∞—Ä–∞", "–≥–∞–≥–∞—á",
        "–ø–∞–≥–∞–Ω–∫–∞", "–∫–æ—û—Ä–∞", "—Ñ–ª–∞–º—ñ–Ω–≥–∞", "–æ–ª—É—à–∞", "–ø–µ–ª—ñ–∫–∞–Ω", "–±–∞–∫–ª–∞–Ω",
        "–±—É–≥–∞–π", "–∫–≤–∞–∫–≤–∞", "–∫–∞—Ä–∞–≤–∞–π–∫–∞", "–∫–æ–ª–ø—ñ—Ü–∞", "—Å–∫–∞–ø–∞", "–∞—Å–∞–µ–¥", "–∫–∞—Ä—à—É–Ω", "–∞—Ä–ª–∞–Ω", "—Å—ñ–ø", "–≥—Ä—ã—Ñ", "–ª—É–Ω—å",
        "—è—Å—Ç—Ä–∞–±", "—à—É–ª—è–∫", "–∫–∞–Ω—é–∫", "–±–µ—Ä–∫—É—Ç", "–ø—É—Å—Ç–∞–ª—å–≥–∞", "—à—É–ª—ë–Ω–∞–∫",
        "–∫–æ–±—á—ã–∫", "–¥–∑–µ—Ä–±–Ω—ñ–∫", "–¥—Ä—ã–º–ª—é–∫", "–∫–∞–±–µ—Ü", "–±–∞–ª–∞–±–∞–Ω", "—Å–∞–ø—Å–∞–Ω",
        "–ø–∞–¥–∞—Ä–æ–∂–Ω—ñ–∫", "–¥–∞—û–≥–∞—Ö–≤–æ—Å—Ç", "–¥—Ä–∞—á", "–ø–∞—Å—Ç—É—à–æ–∫", "–ø–∞–≥–æ–Ω—ã—á",
        "–ø–∞–≥–æ–Ω—ñ—á", "—á–∞—Ä–æ—Ç–Ω—ñ—Ü–∞", "–ª—ã—Å—É—Ö–∞", "–¥—Ä–æ–ø", "—Å—Ç—Ä—ç–ø–µ—Ç", "—Å—è–≤–µ—Ü",
        "—Å–µ—û–∫–∞", "–≥–∞–ª—å—à—Ç—É—á–Ω—ñ–∫", "–∑—É—ë–∫", "—Ö—Ä—É—Å—Ç–∞–Ω", "–∫—Ä—ã–≤–æ–∫", "—Ö–∞–¥—É–ª–∞—á–Ω—ñ–∫",
        "—à—ã–ª–∞–¥–∑—é–±", "–º–∞—Ä–∞–¥—É–Ω–∫–∞", "–ø–µ—Ä–∞–≤–æ–∑—á—ã–∫", "—á–∞—Ä–Ω—è–∫", "—à—á–æ–≥–∞–ª—å",
        "—Å–µ–ª—è–Ω–µ—Ü", "–ø–∞—Ä—É—á–∞–π–Ω—ñ–∫", "—Ü—è–∫—É–Ω", "—Å–ª—É—á–æ–∫", "–∫—É–ª–æ–Ω", "–≤–µ—Ä–∞—Ü–µ–Ω–Ω—ñ–∫",
        "–≥—Ä—ã—Ü—É–∫", "–∫–∞–º–µ–Ω–µ—à–∞—Ä–∫–∞", "–ø—è—Å–æ—á–Ω—ñ–∫", "–ø—è—Å—á–∞–Ω–∫–∞", "–≤–µ—Ä–∞–±–µ–π",
        "–±–µ–ª–∞—Ö–≤–æ—Å—Ç—ã", "–º–∞—Ä—Å–∫—ñ", "–∫—ñ—Ä–∫—É–Ω", "—á–æ—Ä–Ω–∞–≤–∞–ª–ª—ë–≤—ñ–∫", "—á—ã—Ä–≤–æ–Ω–∞–≤–∞–ª–ª—ë–≤—ñ–∫",
        "–≥—Ä–∞–∑–µ–≤—ñ–∫", "–±–∞—Ç–∞–ª—ë–Ω", "–≥–∞—Ä—à–Ω—ç–ø", "—Å—Ç—É—á–æ–∫", "–¥—É–±–∞–ª—å—Ç", "—Å–ª–æ–Ω–∫–∞",
        "–ø–ª—ã–≤—É–Ω—á—ã–∫", "—Ü—ñ—Ä–∫—É—à–∫–∞", "—á–∞–π–∫–∞", "—Ç–∞–Ω–∫–∞–¥–∑—é–±–∞—è", "—á–æ—Ä–Ω–∞–≥–∞–ª–æ–≤–∞—è",
        "–∫–ª—ã–≥—É–Ω", "—à—ã–∑–∞—è", "—Ä–∞–≥–∞—Ç—É—Ö–∞", "–∫–ª—É—à–∞", "—Ä–∞–≥–∞—Ç—É–Ω", "–º–∞—Ä—Å–∫–∞—è",
        "—Ä—ã–±–∞—á–∫–∞", "–∫—Ä–∞—á–∫–∞", "–∫—Ä—ã—á–∫–∞", "—á—ç–≥—Ä–∞–≤–∞", "–ø–∞–ª—è—Ä–Ω–∞—è", "–ø–∞–º–æ—Ä–Ω—ñ–∫",
        "—Å–∞–¥–∂–∞", "–∫–ª—ñ–Ω—Ç—É—Ö", "–≤—è—Ö—ñ—Ä", "—Ç—É—Ä–∫–∞—û–∫–∞", "–∑—è–∑—é–ª—è", "—Å—ñ–ø—É—Ö–∞", "—Å–ø–ª—é—à–∫–∞", "–±—è—Ä–æ–∑–∞—û–∫–∞",
        "—Å—ñ–ø–µ–ª—å", "–∫—É–≥–∞–∫–∞—û–∫–∞", "–ª—è–ª—è–∫", "–∑—ñ–º–∞—Ä–æ–¥–∞–∫", "—à—á—É—Ä–∫–∞", "—Å—ñ–≤–∞–≥—Ä–∞–∫", "—É–¥–æ–¥", "–∫—Ä—É—Ü—ñ–≥–∞–ª–æ—û–∫–∞",
        "–¥–∑—è—Ü–µ–ª", "–∂–∞—û–Ω–∞", "–≥—Ä—ã—á—É–Ω", "—Å–∞—Ä–∞–∫—É—à", "–∞–≤—è–ª—å–≥–∞", "–∫—É–∫—à–∞", "—Å–æ–π–∫–∞", "—Å–∞—Ä–æ–∫–∞",
        "–∞—Ä—ç—Ö–∞—û–∫–∞", "–∫–∞—û–∫–∞", "–≤—É—Å–∞—Ç–∞—è —Å—ñ–Ω—ñ—Ü–∞", "–∂–∞—û—Ä—É–∫", "—Å–≤—ñ—Ä–≥—É–ª—å", "–∑–µ–º–ª—è–Ω–∫–∞", "–ª—è—Å—Ç–æ—û–∫–∞",
        "–º–∞—Å–∫–æ—û–∫–∞", "—á—É–±–∞—Ç–∞—è —Å—ñ–Ω—ñ—Ü–∞", "–±–ª–∞–∫—ñ—Ç–Ω—ñ—Ü–∞", "—Ä—ç–º–µ–∑", "–∞–ø–∞–ª–æ—û–Ω—ñ–∫", "–≥–ª—ñ–Ω—è–Ω–∫–∞",
        "–ø–∞—û–∑—É–Ω–æ–∫", "–∫—Ä–∞–ø—ñ—û–Ω—ñ–∫", "–≤–∞–ª–∞–≤–æ–∫–∞", "–∞–ª—è–ø–∫–∞", "–∫–∞—Ä–∞–ª—ë–∫", "–ø—è—á—É—Ä–∞—û–∫–∞", "–ø–µ—Ä–∞—Å–º–µ—à–∫–∞",
        "—á–∞—Ä–æ—Ç–∞—û–∫–∞", "—á–∞—Ä–∞—Ü—è–Ω–∫–∞", "–º–∞—Ä–º—ã—Ç—É–ª—è", "—Ü–≤—ã—Ä–∫—É–Ω", "–ª–µ—Å–∫–∞", "–≤–∞–ª–∞—Å–µ–Ω—ñ—Ü–∞", "–º–∞–ª—ñ–Ω–∞—û–∫–∞",
        "—Å–∞–ª–∞–≤–µ–π", "–∫—Ä–∞–ª—å–∫–∞", "—Ä—É–¥–∞—Ö–≤–æ—Å—Ç–∫–∞", "–ø–∞–¥–∫–∞–º–µ–Ω–∫–∞", "–µ—Ä—á—ã–∫", "—Å—ñ–Ω—è—Ö–≤–æ—Å—Ç–∫–∞", "—Ä–∞–±—ñ–Ω–Ω—ñ–∫",
        "–¥–∑—è—Ä–∞–±–∞", "–∑–∞–≤—ñ—Ä—É—à–∫–∞", "–ø–ª—ñ—Å–∫–∞", "—Å—ñ—Ç–∞—û–∫–∞", "—Å–≤—ñ—Ä—Å—Ç—É–Ω", "–∞–º—è–ª—É—à–∫–∞", "—Å—Ç—Ä—ã–Ω–∞–∫—Ç–∞",
        "–¥—É–±—Ä–æ—û–Ω—ñ–∫", "—Å–Ω—è–∂—É—Ä–∫–∞", "–ø—É–Ω–∞—á–∫–∞", "–±–µ—Ä–∞—Å—Ü—è–Ω–∫–∞", "–∑—è–±–æ–∫", "—é—Ä–æ–∫", "—à—á—É—Ä–æ–∫", "—á–∞—Ä–æ–º–∞—à–Ω—ñ–∫", "–∑–µ–ª—è–Ω—É—à–∫–∞",
        "–∫—Ä—ã–∂–∞–¥–∑—é–±", "—è–ª–æ–≤—ñ–∫", "—á–∞—á–æ—Ç–∫–∞", "—á—ã–∂", "—à—á—ã–≥–µ–ª", "–∫–∞–Ω–∞–ø–ª—è–Ω–∫–∞", "–≥—ñ–ª—å", "—Ç–∞—û—Å—Ç–∞–¥–∑—é–±", "–≤–µ—Ä–∞–±–µ–π"
    }
    
    def __init__(self):
        self.authorized_users = {}
        self.lock = threading.Lock()
        self.application = None

    def set_application(self, application):
        self.application = application

    async def send_logout_message(self, user, chat_id):
        message = f"You @{user} have been logged outüôÉ\nBye bye! See you soon!"
        await self.application.send_message(chat_id=chat_id, text=message)

    async def add_user(self, user, password, update):
        if password.lower() in self.passwords:
            with self.lock:
                self.authorized_users[user] = update.effective_chat.id
                print("chat_id = ", self.authorized_users[user])
                await update.message.reply_text("Hey! Glad you're here!")
            return True
        return False

    async def remove_user(self, user, word, update):
        if word.lower().strip() == "logout":
            with self.lock:
                if user in self.authorized_users:
                    chat_id = self.authorized_users.pop(user)
                    # await self.send_logout_message(user, chat_id)
                    await update.message.reply_text("Bye bye! See you soon!")
            return True
        return False

    def is_user_authorized(self, user):
        with self.lock:
            return user in self.authorized_users

    def reset_authorized_users(self):
        with self.lock:
            users_to_notify = self.authorized_users.copy()
            for user in users_to_notify:
                if user != 'irina_199':
                    chat_id = self.authorized_users.pop(user)
                    # asyncio.run_coroutine_threadsafe(
                    #     self.send_logout_message(user, chat_id),
                    #     asyncio.get_event_loop()
                    # )


auth_manager = UserAuthorizationManager()
